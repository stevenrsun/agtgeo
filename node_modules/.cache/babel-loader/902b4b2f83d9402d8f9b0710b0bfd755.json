{"ast":null,"code":"var _jsxFileName = \"/home/steven/Documents/agtgeo/src/pages/services.js\";\nimport React, { Component } from 'react';\nimport { ServiceItem } from '../components/serviceItem.js';\nimport { PageNav } from '../components/pageNav.js';\nimport { Footer } from '../components/footer.js';\nimport { Link } from 'react-router-dom';\nexport class Services extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // just as in news.js, id corresponds to the number displayed in url\n      // format must be either 'list' or 'text' exactly:\n      // list: use key list equal to an array of strings to be displayed in a vertical, bulleted list under the card title\n      // text: the entire string will be displayed and wrap around per line according to the dimensions of the containing card\n      // the body key corresponds to the text that will appear in each instance page (after clicking more info on a card)\n      // any additional keys can be accessed in src/components/serviceItem.js using this.props.info.keyName or this.props.info['keyName']\n      services: [{\n        format: 'list',\n        id: 4364364,\n        title: 'Researcopment',\n        list: ['40% of all capital is committed to R&D', 'Customer Focused Results - technology roadmap is adaptable', 'Rapid Technology Implementation - i.e. AVO Compliant RTM Gathers, Q', 'Nimble; technology roadmap adaptable to clients\\' needs'],\n        body: 'asdfasfdafae'\n      }, {\n        format: 'list',\n        id: 3,\n        title: 'Research & Development',\n        list: ['40% of all capital is committed to R&D', 'Customer Focused Results - technology roadmap is adaptable', 'Rapid Technology Implementation - i.e. AVO Compliant RTM Gathers, Q', 'Nimble; technology roadmap adaptable to clients\\' needs'],\n        body: 'Body text to be added.'\n      }, {\n        format: 'list',\n        id: 2,\n        title: 'Migration & Velocity Model Building',\n        list: ['2D/3D Time', '2D/3D Depth', 'Land/Marine (NAZ, WAZ, Broadband, Nodal, etc.)'],\n        body: 'Body text to be added.'\n      }, {\n        format: 'text',\n        id: 1,\n        title: 'Seismic Imaging Service',\n        text: 'AGT provides advanced, best-in-class seismic imaging services to Oil and Gas Companies.',\n        body: 'Body text to be added.'\n      }],\n\n      /*servicesReset:[\n          { format: 'list', id: 3, title: 'Research & Development', list: ['40% of all capital is committed to R&D', 'Customer Focused Results - technology roadmap is adaptable', 'Rapid Technology Implementation - i.e. AVO Compliant RTM Gathers, Q', 'Nimble; technology roadmap adaptable to clients\\' needs'], body: 'Body text to be added.'},\n          { format: 'list', id: 2, title: 'Migration & Velocity Model Building', list: ['2D/3D Time', '2D/3D Depth', 'Land/Marine (NAZ, WAZ, Broadband, Nodal, etc.)'], body: 'Body text to be added.'},\n          { format: 'text', id: 1, title: 'Seismic Imaging Service', text: 'AGT provides advanced, best-in-class seismic imaging services to Oil and Gas Companies.', body: 'Body text to be added.'}\n      ], */\n      // a copy of the entirety of news to be saved every time news is modified by a function call, since there is currently\n      // no filter for this page, it's useless, but I'm keeping it here in case we decide to apply filters later. There's \n      // no need to update this at all until filters are implemented, so you can leave it alone unlike the news/technology pages\n      numServiceItems: 6,\n      // number of news entries to be displayed per page\n      page: 0,\n      title: 'SERVICES'\n    };\n\n    this.formatService = () => {\n      var serviceJSX = [];\n      let i = this.state.page * this.state.numServiceItems;\n\n      while (i < this.state.services.length && i < this.state.page * this.state.numServiceItems + 6) {\n        let dict = this.state.services[i];\n        serviceJSX.push(React.createElement(ServiceItem, {\n          info: dict,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }));\n        i++;\n      }\n\n      if (serviceJSX.length > 0) return serviceJSX;else return React.createElement(\"span\", {\n        class: \"txt subheading ml-2 mt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"Nothing on this page.\");\n    };\n\n    this.incrementPage = () => {\n      const page = this.state.page + 1;\n      this.setState({\n        page\n      });\n    };\n\n    this.incrementPageTwice = () => {\n      const page = this.state.page + 2;\n      this.setState({\n        page\n      });\n    };\n\n    this.decrementPage = () => {\n      const page = this.state.page - 1;\n      this.setState({\n        page\n      });\n    };\n\n    this.goFirstPage = () => {\n      const page = 0;\n      this.setState({\n        page\n      });\n    };\n\n    this.goLastPage = () => {\n      const page = Math.ceil(this.state.services.length / this.state.numServiceItems) - 1;\n      this.setState({\n        page\n      });\n    };\n\n    this.reset = () => {\n      this.setState({\n        services: this.state.servicesReset\n      });\n    };\n  }\n\n  componentDidMount() {\n    document.title = 'AGT - Services';\n  } // convert numServiceItems at a time news entries into NewsItem components\n\n\n  /*applyFilter = (num) => {\n      var newTitle = '';\n      var newList = [];\n      if(num==0) {\n          newTitle = 'SERVICES';\n          newList = this.state.servicesReset.filter(o=>{return o['category'] == 'service'});\n      }\n      else if(num==1) {\n          newTitle = 'TECHNOLOGIES';\n          newList = this.state.servicesReset.filter(o=>{return o['category'] == 'tech'});\n      }\n      else {\n          newTitle = 'SERVICES AND TECHNOLOGIES';\n          newList = this.state.servicesReset;\n      }\n      this.setState({title: newTitle, services: newList, page: 0})\n  }*/\n  render() {\n    var serviceFormatted = this.formatService();\n    return React.createElement(\"div\", {\n      style: {\n        width: '100vw'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"container-fluid border border-grey\",\n      style: {\n        width: '60vw',\n        minWidth: 700\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"col-8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      class: \"heading ml-2 mt-1\",\n      style: {\n        fontSize: 35,\n        color: '#585c5e'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, this.state.title), serviceFormatted))), React.createElement(\"div\", {\n      class: \"d-flex justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(PageNav, {\n      decrementPage: this.decrementPage,\n      incrementPage: this.incrementPage,\n      goFirstPage: this.goFirstPage,\n      goLastPage: this.goLastPage,\n      page: this.state.page,\n      incrementPageTwice: this.incrementPageTwice,\n      lastPage: Math.ceil(this.state.services.length / this.state.numServiceItems),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    })), React.createElement(Footer, {\n      min: 700,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/steven/Documents/agtgeo/src/pages/services.js"],"names":["React","Component","ServiceItem","PageNav","Footer","Link","Services","state","services","format","id","title","list","body","text","numServiceItems","page","formatService","serviceJSX","i","length","dict","push","incrementPage","setState","incrementPageTwice","decrementPage","goFirstPage","goLastPage","Math","ceil","reset","servicesReset","componentDidMount","document","render","serviceFormatted","width","minWidth","fontSize","color"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {ServiceItem} from '../components/serviceItem.js';\nimport {PageNav} from '../components/pageNav.js';\nimport {Footer} from '../components/footer.js';\nimport {Link} from 'react-router-dom';\n\nexport class Services extends Component {\n    state = { \n        // just as in news.js, id corresponds to the number displayed in url\n\n        // format must be either 'list' or 'text' exactly:\n        // list: use key list equal to an array of strings to be displayed in a vertical, bulleted list under the card title\n        // text: the entire string will be displayed and wrap around per line according to the dimensions of the containing card\n\n        // the body key corresponds to the text that will appear in each instance page (after clicking more info on a card)\n        // any additional keys can be accessed in src/components/serviceItem.js using this.props.info.keyName or this.props.info['keyName']\n        services: [\n            { format: 'list', id: 4364364, title: 'Researcopment', list: ['40% of all capital is committed to R&D', 'Customer Focused Results - technology roadmap is adaptable', 'Rapid Technology Implementation - i.e. AVO Compliant RTM Gathers, Q', 'Nimble; technology roadmap adaptable to clients\\' needs'], body: 'asdfasfdafae'},\n            { format: 'list', id: 3, title: 'Research & Development', list: ['40% of all capital is committed to R&D', 'Customer Focused Results - technology roadmap is adaptable', 'Rapid Technology Implementation - i.e. AVO Compliant RTM Gathers, Q', 'Nimble; technology roadmap adaptable to clients\\' needs'], body: 'Body text to be added.'},\n            { format: 'list', id: 2, title: 'Migration & Velocity Model Building', list: ['2D/3D Time', '2D/3D Depth', 'Land/Marine (NAZ, WAZ, Broadband, Nodal, etc.)'], body: 'Body text to be added.'},\n            { format: 'text', id: 1, title: 'Seismic Imaging Service', text: 'AGT provides advanced, best-in-class seismic imaging services to Oil and Gas Companies.', body: 'Body text to be added.'}\n        ],\n        /*servicesReset:[\n            { format: 'list', id: 3, title: 'Research & Development', list: ['40% of all capital is committed to R&D', 'Customer Focused Results - technology roadmap is adaptable', 'Rapid Technology Implementation - i.e. AVO Compliant RTM Gathers, Q', 'Nimble; technology roadmap adaptable to clients\\' needs'], body: 'Body text to be added.'},\n            { format: 'list', id: 2, title: 'Migration & Velocity Model Building', list: ['2D/3D Time', '2D/3D Depth', 'Land/Marine (NAZ, WAZ, Broadband, Nodal, etc.)'], body: 'Body text to be added.'},\n            { format: 'text', id: 1, title: 'Seismic Imaging Service', text: 'AGT provides advanced, best-in-class seismic imaging services to Oil and Gas Companies.', body: 'Body text to be added.'}\n        ], */// a copy of the entirety of news to be saved every time news is modified by a function call, since there is currently\n        // no filter for this page, it's useless, but I'm keeping it here in case we decide to apply filters later. There's \n        // no need to update this at all until filters are implemented, so you can leave it alone unlike the news/technology pages\n        numServiceItems: 6, // number of news entries to be displayed per page\n        page: 0,\n        title: 'SERVICES'\n    }\n\n    componentDidMount() {\n        document.title = 'AGT - Services';\n    }\n    \n    // convert numServiceItems at a time news entries into NewsItem components\n    formatService = () => {\n        var serviceJSX = [];\n        let i = this.state.page * this.state.numServiceItems;\n        while(i<this.state.services.length && i<this.state.page*this.state.numServiceItems + 6){\n            let dict = this.state.services[i];\n            serviceJSX.push(<ServiceItem info={dict}/>)\n            i++;\n        }\n        if(serviceJSX.length > 0)\n            return serviceJSX;\n        else\n            return <span class=\"txt subheading ml-2 mt-2\">Nothing on this page.</span>\n    }\n\n    incrementPage = () => {\n        const page = this.state.page + 1;\n        this.setState({page});\n    }\n\n    incrementPageTwice = () => {\n        const page = this.state.page + 2;\n        this.setState({page});\n    }\n    \n    decrementPage = () => {\n        const page = this.state.page - 1;\n        this.setState({page});\n    }\n    \n    goFirstPage = () => {\n        const page = 0;\n        this.setState({page});\n    }\n\n    goLastPage = () => {\n        const page = Math.ceil(this.state.services.length/this.state.numServiceItems) - 1;\n        this.setState({page});\n    }\n\n    reset = () => {\n        this.setState({services: this.state.servicesReset});\n    }\n\n    /*applyFilter = (num) => {\n        var newTitle = '';\n        var newList = [];\n        if(num==0) {\n            newTitle = 'SERVICES';\n            newList = this.state.servicesReset.filter(o=>{return o['category'] == 'service'});\n        }\n        else if(num==1) {\n            newTitle = 'TECHNOLOGIES';\n            newList = this.state.servicesReset.filter(o=>{return o['category'] == 'tech'});\n        }\n        else {\n            newTitle = 'SERVICES AND TECHNOLOGIES';\n            newList = this.state.servicesReset;\n        }\n        this.setState({title: newTitle, services: newList, page: 0})\n    }*/\n\n    render() { \n        var serviceFormatted = this.formatService();\n        return ( \n            <div style={{width: '100vw'}}>\n            <div class=\"container-fluid border border-grey\" style={{width: '60vw', minWidth: 700}}>\n                <div class=\"row\">\n                    <div class=\"col-8\">\n                        <h1 class=\"heading ml-2 mt-1\" style={{fontSize: 35, color: '#585c5e'}}>{this.state.title}</h1>\n                        {serviceFormatted}\n                    </div>\n                </div>\n            </div>\n            <div class=\"d-flex justify-content-center\">\n                <PageNav decrementPage={this.decrementPage} \n                        incrementPage={this.incrementPage}\n                        goFirstPage={this.goFirstPage}\n                        goLastPage={this.goLastPage}\n                        page={this.state.page}\n                        incrementPageTwice={this.incrementPageTwice}\n                        lastPage={Math.ceil(this.state.services.length/this.state.numServiceItems)}/>\n            </div>\n            <Footer min={700}/>\n            </div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}